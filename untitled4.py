# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RL8CXr2458QPYh8CevPE5_eE2THEnfuj
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

!pip install -q gdown
!gdown --id 1ZKS3zzynaXAAlJvql2vu6W6qz2ift4QM

data = pd.read_csv('US_Accidents_March23.csv')
data = data.dropna(axis=0)

"""## Prepare data for weather-based severity prediction

### Subtask:
Select relevant features for predicting accident severity based on weather conditions and prepare the data for modeling.

**Reasoning**:
Create a list of weather-related column names, select these columns to create a new DataFrame `weather_features`, create the target Series, apply one-hot encoding to the 'Weather_Condition' column, scale the numerical features, and split the data into training and testing sets.
"""

weather_columns = ['Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)',
                   'Visibility(mi)', 'Wind_Speed(mph)', 'Precipitation(in)',
                   'Weather_Condition']
weather_features = data[weather_columns].copy()
target = data['Severity']

weather_features_encoded = pd.get_dummies(weather_features, columns=['Weather_Condition'], drop_first=True)

numerical_features = ['Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)',
                      'Visibility(mi)', 'Wind_Speed(mph)', 'Precipitation(in)']
scaler = StandardScaler()
weather_features_encoded[numerical_features] = scaler.fit_transform(weather_features_encoded[numerical_features])

X_train, X_test, y_train, y_test = train_test_split(weather_features_encoded, target, test_size=0.2, random_state=42)

"""## Model for weather-based severity prediction

### Subtask:
Train a Decision Tree model to predict accident severity based on weather conditions.

**Reasoning**:
Import the DecisionTreeClassifier and train the model.
"""

from sklearn.tree import DecisionTreeClassifier

dt_model = DecisionTreeClassifier(random_state=42)
dt_model.fit(X_train, y_train)

"""## Evaluate weather-based severity prediction model

### Subtask:
Evaluate the performance of the Decision Tree model.

**Reasoning**:
Import the necessary evaluation metrics and evaluate the trained Decision Tree model using the test set.
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred = dt_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1}")

"""## Prepare data for road-type based severity prediction

### Subtask:
Select relevant features for predicting accident severity based on the type of road and prepare the data for modeling.

**Reasoning**:
Select the specified road type columns and the target variable, then split the data into training and testing sets.
"""

road_type_features = data[['Street', 'Crossing', 'Junction', 'Roundabout', 'Station']].copy()
target = data['Severity']

X_train_road, X_test_road, y_train_road, y_test_road = train_test_split(road_type_features, target, test_size=0.2, random_state=42)

"""## Model for road-type based severity prediction

### Subtask:
Train a Decision Tree model to predict accident severity based on the type of road.

**Reasoning**:
Instantiate and fit a Decision Tree model to predict accident severity based on road type.

## Evaluate road-type based severity prediction model

### Subtask:
Evaluate the performance of the Decision Tree model.

**Reasoning**:
Import the necessary evaluation metrics and evaluate the trained Decision Tree model using the test set.
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred_road = dt_road_model.predict(X_test_road)

accuracy_road = accuracy_score(y_test_road, y_pred_road)
precision_road = precision_score(y_test_road, y_pred_road, average='weighted')
recall_road = recall_score(y_test_road, y_pred_road, average='weighted')
f1_road = f1_score(y_test_road, y_pred_road, average='weighted')

print(f"Accuracy (Road Type): {accuracy_road}")
print(f"Precision (Road Type): {precision_road}")
print(f"Recall (Road Type): {recall_road}")
print(f"F1-score (Road Type): {f1_road}")

from sklearn.tree import DecisionTreeClassifier

dt_road_model = DecisionTreeClassifier(random_state=42)
dt_road_model.fit(X_train_road, y_train_road)

"""## Prepare data for time-of-day based severity prediction

### Subtask:
Select relevant features for predicting accident severity based on the time of day and prepare the data for modeling.

**Reasoning**:
Extract the hour of the day from the 'Start_Time' column, apply one-hot encoding to the 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', and 'Astronomical_Twilight' columns, and split the data into training and testing sets.
"""

time_of_day_features = data[['Start_Time', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']].copy()
target = data['Severity']

time_of_day_features['Hour'] = pd.to_datetime(time_of_day_features['Start_Time'], format='mixed').dt.hour
time_of_day_features = time_of_day_features.drop(columns=['Start_Time'])

time_of_day_features_encoded = pd.get_dummies(time_of_day_features, columns=['Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight'], drop_first=True)

X_train_time, X_test_time, y_train_time, y_test_time = train_test_split(time_of_day_features_encoded, target, test_size=0.2, random_state=42)

"""## Model for time-of-day based severity prediction

### Subtask:
Train a Decision Tree model to predict accident severity based on the time of day.

**Reasoning**:
Instantiate and fit a Decision Tree model to predict accident severity based on the time of day.
"""

dt_time_model = DecisionTreeClassifier(random_state=42)
dt_time_model.fit(X_train_time, y_train_time)

"""## Evaluate time-of-day based severity prediction model

### Subtask:
Evaluate the performance of the Decision Tree model.

**Reasoning**:
Import the necessary evaluation metrics and evaluate the trained Decision Tree model using the test set.
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred_time = dt_time_model.predict(X_test_time)

accuracy_time = accuracy_score(y_test_time, y_pred_time)
precision_time = precision_score(y_test_time, y_pred_time, average='weighted')
recall_time = recall_score(y_test_time, y_pred_time, average='weighted')
f1_time = f1_score(y_test_time, y_pred_time, average='weighted')

print(f"Accuracy (Time of Day): {accuracy_time}")
print(f"Precision (Time of Day): {precision_time}")
print(f"Recall (Time of Day): {recall_time}")
print(f"F1-score (Time of Day): {f1_time}")

"""## Prepare data for injury prediction

### Subtask:
Select relevant features for predicting if an accident will result in injuries and prepare the data for modeling.

**Reasoning**:
Select relevant features for predicting injuries. The target variable will be whether or not an accident results in an injury (derived from relevant columns). Handle categorical features using one-hot encoding and split the data into training and testing sets.
"""

# Assuming 'Injury' is not a direct column, we'll create a target based on relevant columns
# For example, if 'Severity' levels 3 and 4 indicate injuries:
data['Injury'] = data['Severity'].apply(lambda x: 1 if x in [3, 4] else 0)

injury_features = data[['Distance(mi)', 'Street', 'City', 'County', 'State', 'Zipcode', 'Timezone', 'Airport_Code', 'Weather_Timestamp', 'Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)', 'Visibility(mi)', 'Wind_Direction', 'Wind_Speed(mph)', 'Precipitation(in)', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']].copy()
target_injury = data['Injury']

# Drop high cardinality columns that are not suitable for one-hot encoding
injury_features = injury_features.drop(columns=['Street', 'City', 'County', 'State', 'Zipcode', 'Airport_Code', 'Weather_Timestamp'])

# Select categorical features for one-hot encoding
categorical_features_injury = ['Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']

injury_features_encoded = pd.get_dummies(injury_features, columns=categorical_features_injury, drop_first=True)

# Select numerical features for scaling
numerical_features_injury = ['Distance(mi)', 'Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)', 'Visibility(mi)', 'Wind_Speed(mph)', 'Precipitation(in)']
scaler_injury = StandardScaler()
injury_features_encoded[numerical_features_injury] = scaler_injury.fit_transform(injury_features_encoded[numerical_features_injury])


X_train_injury, X_test_injury, y_train_injury, y_test_injury = train_test_split(injury_features_encoded, target_injury, test_size=0.2, random_state=42)

"""## Model for injury prediction

### Subtask:
Train a Decision Tree model to predict if an accident will result in injuries.

**Reasoning**:
Instantiate and fit a Decision Tree model to predict if an accident will result in injuries.
"""

from sklearn.tree import DecisionTreeClassifier

dt_injury_model = DecisionTreeClassifier(random_state=42)
dt_injury_model.fit(X_train_injury, y_train_injury)

"""## Evaluate injury prediction model

### Subtask:
Evaluate the performance of the Decision Tree model.

**Reasoning**:
Import the necessary evaluation metrics and evaluate the trained Decision Tree model using the test set.
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

y_pred_injury = dt_injury_model.predict(X_test_injury)

accuracy_injury = accuracy_score(y_test_injury, y_pred_injury)
precision_injury = precision_score(y_test_injury, y_pred_injury)
recall_injury = recall_score(y_test_injury, y_pred_injury)
f1_injury = f1_score(y_test_injury, y_pred_injury)
roc_auc_injury = roc_auc_score(y_test_injury, dt_injury_model.predict_proba(X_test_injury)[:, 1])


print(f"Accuracy (Injury Prediction): {accuracy_injury}")
print(f"Precision (Injury Prediction): {precision_injury}")
print(f"Recall (Injury Prediction): {recall_injury}")
print(f"F1-score (Injury Prediction): {f1_injury}")
print(f"ROC AUC Score (Injury Prediction): {roc_auc_injury}")

"""## Prepare data for intersection prediction

### Subtask:
Select relevant features for predicting if an accident will involve an accident occurring at a specific intersection and prepare the data for modeling.
"""

# Assuming 'Junction' column indicates if an accident is at an intersection
intersection_features = data[['Distance(mi)', 'Street', 'City', 'County', 'State', 'Zipcode', 'Timezone', 'Airport_Code', 'Weather_Timestamp', 'Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)', 'Visibility(mi)', 'Wind_Direction', 'Wind_Speed(mph)', 'Precipitation(in)', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']].copy()
target_intersection = data['Junction']

# Drop high cardinality columns that are not suitable for one-hot encoding
intersection_features = intersection_features.drop(columns=['Street', 'City', 'County', 'State', 'Zipcode', 'Airport_Code', 'Weather_Timestamp'])

# Select categorical features for one-hot encoding
categorical_features_intersection = ['Timezone', 'Wind_Direction', 'Weather_Condition', 'Amenity', 'Bump', 'Crossing', 'Give_Way', 'No_Exit', 'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming', 'Traffic_Signal', 'Turning_Loop', 'Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']

intersection_features_encoded = pd.get_dummies(intersection_features, columns=categorical_features_intersection, drop_first=True)

# Select numerical features for scaling
numerical_features_intersection = ['Distance(mi)', 'Temperature(F)', 'Wind_Chill(F)', 'Humidity(%)', 'Pressure(in)', 'Visibility(mi)', 'Wind_Speed(mph)', 'Precipitation(in)']
scaler_intersection = StandardScaler()
intersection_features_encoded[numerical_features_intersection] = scaler_intersection.fit_transform(intersection_features_encoded[numerical_features_intersection])


X_train_intersection, X_test_intersection, y_train_intersection, y_test_intersection = train_test_split(intersection_features_encoded, target_intersection, test_size=0.2, random_state=42)

"""## Model for intersection prediction

### Subtask:
Train a Decision Tree model to predict if an accident will involve an accident occurring at a specific intersection.

**Reasoning**:
Instantiate and fit a Decision Tree model to predict if an accident will involve an accident occurring at a specific intersection.
"""

from sklearn.tree import DecisionTreeClassifier

dt_intersection_model = DecisionTreeClassifier(random_state=42)
dt_intersection_model.fit(X_train_intersection, y_train_intersection)

"""## Evaluate intersection prediction model

### Subtask:
Evaluate the performance of the Decision Tree model.

**Reasoning**:
Import the necessary evaluation metrics and evaluate the trained Decision Tree model using the test set.
"""

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score

y_pred_intersection = dt_intersection_model.predict(X_test_intersection)

accuracy_intersection = accuracy_score(y_test_intersection, y_pred_intersection)
precision_intersection = precision_score(y_test_intersection, y_pred_intersection)
recall_intersection = recall_score(y_test_intersection, y_pred_intersection)
f1_intersection = f1_score(y_test_intersection, y_pred_intersection)
roc_auc_intersection = roc_auc_score(y_test_intersection, dt_intersection_model.predict_proba(X_test_intersection)[:, 1])

print(f"Accuracy (Intersection Prediction): {accuracy_intersection}")
print(f"Precision (Intersection Prediction): {precision_intersection}")
print(f"Recall (Intersection Prediction): {recall_intersection}")
print(f"F1-score (Intersection Prediction): {f1_intersection}")
print(f"ROC AUC Score (Intersection Prediction): {roc_auc_intersection}")

"""## Summary of Results

Here's a summary of the performance metrics for each prediction task using the Decision Tree model:

### Accident Severity Prediction (Weather Conditions)
- Accuracy: {{accuracy}}
- Precision (weighted): {{precision}}
- Recall (weighted): {{recall}}
- F1-score (weighted): {{f1}}

### Accident Severity Prediction (Road Type)
- Accuracy: {{accuracy_road}}
- Precision (weighted): {{precision_road}}
- Recall (weighted): {{recall_road}}
- F1-score (weighted): {{f1_road}}

### Accident Severity Prediction (Time of Day)
- Accuracy: {{accuracy_time}}
- Precision (weighted): {{precision_time}}
- Recall (weighted): {{recall_time}}
- F1-score (weighted): {{f1_time}}

### Injury Prediction
- Accuracy: {{accuracy_injury}}
- Precision: {{precision_injury}}
- Recall: {{recall_injury}}
- F1-score: {{f1_injury}}
- ROC AUC Score: {{roc_auc_injury}}

### Intersection Prediction
- Accuracy: {{accuracy_intersection}}
- Precision: {{precision_intersection}}
- Recall: {{recall_intersection}}
- F1-score: {{f1_intersection}}
- ROC AUC Score: {{roc_auc_intersection}}

## Evaluate Weather-Based Severity Prediction Model with MAE and Feature Importances

### Subtask:
Calculate Mean Absolute Error (MAE) and display feature importances for the weather-based severity prediction model.

**Reasoning**:
Calculate the MAE for both training and test sets and get feature importances from the trained Decision Tree model, then display them.
"""

from sklearn.metrics import mean_absolute_error

# Calculate MAE for weather-based severity prediction model
y_pred_train_weather = dt_model.predict(X_train)
y_pred_test_weather = dt_model.predict(X_test)
mae_train_weather = mean_absolute_error(y_train, y_pred_train_weather)
mae_test_weather = mean_absolute_error(y_test, y_pred_test_weather)

print("Training Set Mean Absolute Error (Weather Model): %.4f" % mae_train_weather)
print("Test Set Mean Absolute Error (Weather Model): %.4f" % mae_test_weather)

# Get feature importances for weather-based severity prediction model
feature_importances_weather = dt_model.feature_importances_

# Create a pandas Series to display feature importances with feature names
feature_importances_series_weather = pd.Series(feature_importances_weather, index=X_train.columns)

# Sort feature importances in descending order
sorted_feature_importances_weather = feature_importances_series_weather.sort_values(ascending=False)

print("\nFeature Importances (Weather Model):")
display(sorted_feature_importances_weather)

"""## Evaluate Road-Type Based Severity Prediction Model with MAE and Feature Importances

### Subtask:
Calculate Mean Absolute Error (MAE) and display feature importances for the road-type based severity prediction model.

**Reasoning**:
Calculate the MAE for both training and test sets and get feature importances from the trained Decision Tree model, then display them.
"""

from sklearn.metrics import mean_absolute_error

# Calculate MAE for road-type based severity prediction model
y_pred_train_road = dt_road_model.predict(X_train_road)
y_pred_test_road = dt_road_model.predict(X_test_road)
mae_train_road = mean_absolute_error(y_train_road, y_pred_train_road)
mae_test_road = mean_absolute_error(y_test_road, y_pred_test_road)

print("Training Set Mean Absolute Error (Road Type Model): %.4f" % mae_train_road)
print("Test Set Mean Absolute Error (Road Type Model): %.4f" % mae_test_road)

# Get feature importances for road-type based severity prediction model
feature_importances_road = dt_road_model.feature_importances_

# Create a pandas Series to display feature importances with feature names
feature_importances_series_road = pd.Series(feature_importances_road, index=X_train_road.columns)

# Sort feature importances in descending order
sorted_feature_importances_road = feature_importances_series_road.sort_values(ascending=False)

print("\nFeature Importances (Road Type Model):")
display(sorted_feature_importances_road)

"""## Evaluate Time-of-Day Based Severity Prediction Model with MAE and Feature Importances

### Subtask:
Calculate Mean Absolute Error (MAE) and display feature importances for the time-of-day based severity prediction model.

**Reasoning**:
Calculate the MAE for both training and test sets and get feature importances from the trained Decision Tree model, then display them.
"""

from sklearn.metrics import mean_absolute_error

# Calculate MAE for time-of-day based severity prediction model
y_pred_train_time = dt_time_model.predict(X_train_time)
y_pred_test_time = dt_time_model.predict(X_test_time)
mae_train_time = mean_absolute_error(y_train_time, y_pred_train_time)
mae_test_time = mean_absolute_error(y_test_time, y_pred_test_time)

print("Training Set Mean Absolute Error (Time of Day Model): %.4f" % mae_train_time)
print("Test Set Mean Absolute Error (Time of Day Model): %.4f" % mae_test_time)

# Get feature importances for time-of-day based severity prediction model
feature_importances_time = dt_time_model.feature_importances_

# Create a pandas Series to display feature importances with feature names
feature_importances_series_time = pd.Series(feature_importances_time, index=X_train_time.columns)

# Sort feature importances in descending order
sorted_feature_importances_time = feature_importances_series_time.sort_values(ascending=False)

print("\nFeature Importances (Time of Day Model):")
display(sorted_feature_importances_time)

"""## Evaluate Injury Prediction Model with MAE and Feature Importances

### Subtask:
Calculate Mean Absolute Error (MAE) and display feature importances for the injury prediction model.

**Reasoning**:
Calculate the MAE for both training and test sets and get feature importances from the trained Decision Tree model, then display them.
"""

from sklearn.metrics import mean_absolute_error

# Calculate MAE for injury prediction model
y_pred_train_injury = dt_injury_model.predict(X_train_injury)
y_pred_test_injury = dt_injury_model.predict(X_test_injury)
mae_train_injury = mean_absolute_error(y_train_injury, y_pred_train_injury)
mae_test_injury = mean_absolute_error(y_test_injury, y_pred_test_injury)

print("Training Set Mean Absolute Error (Injury Model): %.4f" % mae_train_injury)
print("Test Set Mean Absolute Error (Injury Model): %.4f" % mae_test_injury)

# Get feature importances for injury prediction model
feature_importances_injury = dt_injury_model.feature_importances_

# Create a pandas Series to display feature importances with feature names
feature_importances_series_injury = pd.Series(feature_importances_injury, index=X_train_injury.columns)

# Sort feature importances in descending order
sorted_feature_importances_injury = feature_importances_series_injury.sort_values(ascending=False)

print("\nFeature Importances (Injury Model):")
display(sorted_feature_importances_injury)

"""## Evaluate Intersection Prediction Model with MAE and Feature Importances

### Subtask:
Calculate Mean Absolute Error (MAE) and display feature importances for the intersection prediction model.

**Reasoning**:
Calculate the MAE for both training and test sets and get feature importances from the trained Decision Tree model, then display them.
"""

from sklearn.metrics import mean_absolute_error

# Calculate MAE for intersection prediction model
y_pred_train_intersection = dt_intersection_model.predict(X_train_intersection)
y_pred_test_intersection = dt_intersection_model.predict(X_test_intersection)
mae_train_intersection = mean_absolute_error(y_train_intersection, y_pred_train_intersection)
mae_test_intersection = mean_absolute_error(y_test_intersection, y_pred_test_intersection)

print("Training Set Mean Absolute Error (Intersection Model): %.4f" % mae_train_intersection)
print("Test Set Mean Absolute Error (Intersection Model): %.4f" % mae_test_intersection)

# Get feature importances for intersection prediction model
feature_importances_intersection = dt_intersection_model.feature_importances_

# Create a pandas Series to display feature importances with feature names
feature_importances_series_intersection = pd.Series(feature_importances_intersection, index=X_train_intersection.columns)

# Sort feature importances in descending order
sorted_feature_importances_intersection = feature_importances_series_intersection.sort_values(ascending=False)

print("\nFeature Importances (Intersection Model):")
display(sorted_feature_importances_intersection)